#include <gst/gst.h>
#include <sys/stat.h>
#include <glib/gstdio.h>
#include <gst/rtsp-server/rtsp-server.h>

#define MOUNT_PATH  "/babo2/live"
#define SHM_PATH  "/tmp/babo2/live"
#define DIR_PATH "/tmp/babo2"

#define S_IRWXUGO (S_IRWXU|S_IRWXG|S_IRWXO)

GMainLoop *loop;


static void
queue_overrun_cb (GstElement * queue,
                  gpointer udata);
static void
queue_running_cb  (GstElement * queue,
                  gpointer udata);

static void
queue_pushing_cb  (GstElement * queue,
                  gpointer udata);

static void
queue_underrun_cb  (GstElement * queue,
                  gpointer udata);

static gboolean
bus_call (GstBus     *bus,
          GstMessage *msg,
          gpointer    data)
{
  GMainLoop *loop = (GMainLoop *) data;

  switch (GST_MESSAGE_TYPE (msg)) {

    case GST_MESSAGE_EOS:
      g_print ("End of stream\n");
      g_main_loop_quit (loop);
      break;

    case GST_MESSAGE_ERROR: {
      gchar  *debug;
      GError *error;

      gst_message_parse_error (msg, &error, &debug);
      g_free (debug);

      g_printerr ("Error: %s\n", error->message);
      g_error_free (error);

      g_main_loop_quit (loop);
      break;
    }
    default:
      break;
  }

  return TRUE;
}

static void
on_pad_added (GstElement *element,
              GstPad     *pad,
              gpointer    data)
{
  GstPad *sinkpad;
  GstElement *sink = (GstElement *) data;

  /* We can now link this pad */
  g_print ("Dynamic pad created, linking src-sink\n");

  sinkpad = gst_element_get_static_pad (sink, "sink");

  gst_pad_link (pad, sinkpad);

  gst_object_unref (sinkpad);
}

struct SrcObject{
  GstElement *pipeline, *source, *queue1, *depay, *parse, *decoder, *queue2, *conv, *sclcaps, *sink;
  GstBus* bus;
  guint bus_watch_id;  
  bool isempty;
};

static void cb_stream_message_progress (GstBus * bus, GstMessage * msg){
  GstProgressType type;
  gchar *code, *text;
  gst_message_parse_progress (msg, &type, &code, &text);
   g_print ("[STREAM-CALLBACK][PROGRESS] : type : %d, code: %s, text: %s, state : %d\n",
    type, code, text);  
}


bool CreateSrcObject(SrcObject* s)
{  
  /* Create gstreamer elements */
  s->pipeline = gst_pipeline_new ("player");
  s->source   = gst_element_factory_make ("rtspsrc",       "rtspsourcee");  
  s->queue1   = gst_element_factory_make ("queue",         "front-queue"); // => src에서 받아서 depay후 queue에서 queing 중이라 1분지나면 끊어버림 
  s->depay    = gst_element_factory_make ("rtph264depay",  "depay");
  s->parse    = gst_element_factory_make ("h264parse",     "parser");
  s->queue2   = gst_element_factory_make ("queue",         "back-queue");
  s->sclcaps  = gst_element_factory_make ("capsfilter",    "scalefilter");
  s->sink     = gst_element_factory_make ("shmsink",      "sharedsink");
  /*
  filter   = gst_element_factory_make("capsfilter", "filter");
  g_assert (filter != NULL); // should always exist 
  decoder  = gst_element_factory_make ("omxh264dec",    "decoder");
  queue2   = gst_element_factory_make ("queue",         "back-queue");
  conv     = gst_element_factory_make ("nvvidconv",     "scaler");
  //s->sink     = gst_element_factory_make ("fakesink",   "fakesink");
  */
  
  //gchar* url = "rtsp://admin:gigaeyes%21%40@192.168.0.58:554/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif";
  gchar* url = "rtsp://admin:admin@192.168.0.194:554/stream1";
  g_printerr("url : %s\n", url);

  if (!s->pipeline || !s->depay  || !s->queue1|| !s->parse || !s->sclcaps || !s->source || !s->sink) {
    g_printerr ("One element could not be created. Exiting.\n");
    goto Create_ERROR;
  }

  g_object_set (G_OBJECT (s->source), "location", url, NULL); 
  g_object_set (G_OBJECT (s->source), "latency", 500, NULL);
  g_object_set (G_OBJECT (s->source), "do-rtcp", TRUE, NULL);
  g_object_set (G_OBJECT (s->source), "do-rtsp-keep-alive", TRUE, NULL);
  g_object_set (G_OBJECT (s->source), "drop-on-latency", TRUE, NULL);

  g_object_set (G_OBJECT (s->queue1), "flush-on-eos", TRUE, NULL);  
  g_object_set (G_OBJECT (s->queue1), "silent", TRUE, NULL);  
  g_object_set (G_OBJECT (s->queue1), "leaky", 2, NULL);  

  g_object_set (G_OBJECT (s->queue2), "min-threshold-bytes", 1024, NULL);  
  g_object_set (G_OBJECT (s->queue2), "min-threshold-buffers", 1, NULL); 
  g_object_set (G_OBJECT (s->queue2), "min-threshold-time", 1000, NULL);

  g_object_set (G_OBJECT (s->parse), "config-interval", -1, NULL);  
  g_object_set (G_OBJECT (s->parse), "disable-passthrough", TRUE, NULL);

  g_object_set (G_OBJECT (s->sink), "socket-path", SHM_PATH, NULL);  
  g_object_set (G_OBJECT (s->sink), "wait-for-connection", FALSE, NULL);
  g_object_set (G_OBJECT (s->sink), "shm-size", 1048576, NULL);
  g_object_set (G_OBJECT (s->sink), "enable-last-sample", FALSE, NULL);
  g_object_set (G_OBJECT (s->sink), "sync", FALSE, NULL);

  GstCaps *caps = gst_caps_new_simple(
                    "video/x-h264",
                    "stream-format", G_TYPE_STRING, "byte-stream",
                    "alignment", G_TYPE_STRING, "au",
                    NULL);

  g_object_set (G_OBJECT (s->sclcaps),
                  "caps", caps,
                  NULL);

  gst_caps_unref(caps);

  s->bus = gst_pipeline_get_bus (GST_PIPELINE (s->pipeline));
  gst_bus_add_signal_watch_full (s->bus, G_PRIORITY_HIGH);
  g_signal_connect (s->bus, "message::progress", G_CALLBACK (cb_stream_message_progress),  s->depay);

  s->bus_watch_id = gst_bus_add_watch (s->bus, bus_call, loop);
 

  gst_bin_add_many (GST_BIN (s->pipeline),
                    s->source, s->depay, s->parse, s->sclcaps, s->sink, NULL);

  gst_element_link_many (s->depay, s->parse, s->sclcaps, s->sink, NULL);
  gst_object_unref (s->bus);
  g_signal_connect (s->source, "pad-added", G_CALLBACK (on_pad_added), s->depay);


  
  

  return true;

  Create_ERROR:
  return false;
}

bool DeleteObject(SrcObject* s){
  gst_object_unref (GST_OBJECT (s->pipeline));
  g_source_remove (s->bus_watch_id);
  return true;
}


/*********************************************************************/
/***********************TIMEOUT FUNC LIST ****************************/
/*********************************************************************/ 

// CleanExpiredSession
// client_filter : shutdown all client 
// shutdown_timeout : remove mount path 
// client_connected 

static gint
MakeSrcObject (SrcObject *t1)
{
  // if(GST_STATE(t1->pipeline) == GST_STATE_NULL){
  //   g_print ("Now playing\n");
  //   CreateSrcObject(t1);
  //   gst_element_set_state (t1->pipeline, GST_STATE_PLAYING);
  // }
  // else{
  //   g_print ("Now stopping\n");
  //   gst_element_set_state (t1->pipeline, GST_STATE_NULL);
  //   DeleteObject(t1);
  // }

  if(t1->isempty){
    g_print ("Now Create & Play\n");
    CreateSrcObject(t1);
    GstStateChangeReturn ret = gst_element_set_state (t1->pipeline, GST_STATE_PLAYING);
    if (ret == GST_STATE_CHANGE_FAILURE) {
    g_printerr ("Unable to set the pipeline to the playing state.\n");
    return -1;
    } else if (ret == GST_STATE_CHANGE_NO_PREROLL) {
      g_print("GST_STATE_CHANGE_NO_PREROLL\n");
    }
    else if (ret == GST_STATE_CHANGE_ASYNC){
      g_print("GST_STATE_CHANGE_ASYNC\n");
    }

    t1->isempty=FALSE;
  }
  else{
    g_print ("PLAYING.....\n");   
    //gst_element_set_state (t1->pipeline, GST_STATE_NULL);
    //DeleteObject(t1);
    //t1->isempty=TRUE;
  }
  //g_print ("Now playing\n");
  return TRUE;
}

/* this timeout is periodically run to clean up the expired sessions from the
 * pool. This needs to be run explicitly currently but might be done
 * automatically as part of the mainloop. */

static GstRTSPFilterResult
client_filter (GstRTSPServer * server, GstRTSPClient * client,
    gpointer user_data)
{
  /* Simple filter that shuts down all clients. */
  return GST_RTSP_FILTER_REMOVE;
}
static GstRTSPFilterResult
keep_client(GstRTSPServer * server)
{
  return  GST_RTSP_FILTER_KEEP;
}

static gboolean
CleanExpiredSession (GstRTSPServer * server)
{ 
  
  GstRTSPSessionPool *pool;
  pool = gst_rtsp_server_get_session_pool (server);
  g_print("CleanExpiredSession call\n Now num of rtsp_session_pool : %d\n",gst_rtsp_session_pool_get_n_sessions(pool));
  gst_rtsp_session_pool_cleanup (pool);
  g_object_unref (pool);

  return TRUE;
}

static void
new_session_cb (GObject * client, GstRTSPSession * session, gpointer user_data)
{
  g_print ("%p: new session %p\n", client, session);
  gst_rtsp_session_set_timeout (session, 20);
}

/* Timeout that runs 10 seconds after the first client connects and triggers
 * the shutdown of the server */
static gboolean
CleanClientinServer (GstRTSPServer * server)
{  
  /* Filter existing clients and remove them */
  g_print ("Force to Disconnect existing clients\n");
  GList * ClientList = gst_rtsp_server_client_filter (server, client_filter, NULL);
  g_print("Now, num of clients in server %d\n", g_list_length(ClientList));
  g_free (ClientList);

  return FALSE;
}

static void
client_connected (GstRTSPServer * server, GstRTSPClient * client)
{
  g_print("Client_Connected\n");
   g_signal_connect (G_OBJECT (client), "new-session",
      G_CALLBACK (new_session_cb), NULL);

  //if (exit_timeout_id == 0) {
  //  g_print ("First Client connected. Disconnecting everyone in 10 seconds\n");
  //  exit_timeout_id =
  //      g_timeout_add_seconds (10, (GSourceFunc) shutdown_timeout, server);
  //}
}

static void
queue_overrun_cb (GstElement * queue,
                  gpointer udata)
{
  g_print("from source buffer_became full\n");
}

static void
queue_pushing_cb  (GstElement * queue,
                  gpointer udata)
{
  g_print("queue has enough data to start pushing data\n");
}

static void
queue_running_cb  (GstElement * queue,
                  gpointer udata)
{
  g_print("Reports that enough (min-threshold) data is in the queue.\n");
}

static void
queue_underrun_cb  (GstElement * queue,
                  gpointer udata)
{
  
  g_print("Reports that the buffer became empty (underrun). A buffer is lower than the boundary values\n");
  guint* buffer = NULL;
  g_object_get (queue, "current-level-buffers", &buffer, NULL);
  g_print( " Current-level-buffer : %d ", buffer);
  g_free(buffer);
}

// gchar* media_pipeline = g_strdup_printf("shmsrc socket-path=%s do-timestamp=TRUE is-live=TRUE"
//            " ! video/x-h264, width=(int)1, height=(int)1, framerate=(fraction)0/1, stream-format=(string)byte-stream, alignment=au"
//            " ! queue flush-on-eos=TRUE max-size-buffers=1 leaky=2 " 
//            " ! rtph264pay config-interval=0 name=pay0 pt=97", SHM_PATH);


static void
media_configure (GstRTSPMediaFactory * factory, GstRTSPMedia * media,
    gpointer user_data)
{
  g_print("media_configure_called");
  GstElement *element, *source, *queue;
  //MyContext *ctx;

  /* get the element used for providing the streams of the media */
  element = gst_rtsp_media_get_element (media);

   /* get our appsrc, we named it 'mysrc' with the name property */
  //source = gst_bin_get_by_name_recurse_up (GST_BIN (element), "source");
  queue = gst_bin_get_by_name_recurse_up (GST_BIN (element), "queue1");
  //g_signal_connect (queue, "overrun", (GCallback) queue_overrun_cb, NULL);
  //g_signal_connect (queue, "pushing", (GCallback) queue_pushing_cb, NULL);
  //g_signal_connect (queue, "running", (GCallback) queue_running_cb, NULL);
  g_signal_connect (queue, "pushing", (GCallback) queue_pushing_cb, NULL);
  g_signal_connect (queue, "running", (GCallback) queue_running_cb, NULL);
  

  gst_object_unref (element);
  gst_object_unref (queue);

  // // 최상위 element에서 신호 받을수 있나? 

  //  //            " ! video/x-h264, width=(int)1, height=(int)1, framerate=(fraction)0/1, stream-format=(string)byte-stream, alignment=au"
  //  /* configure the caps of the video */
  // g_object_set (G_OBJECT (source), "caps",
  //     gst_caps_new_simple ("video/x-h264",
  //     //    "format", G_TYPE_STRING, "RGB16",
  //         "width", G_TYPE_INT, 1,
  //         "height", G_TYPE_INT, 1,
  //         "framerate", GST_TYPE_FRACTION, 0, 1, NULL), NULL);

  

}
static void
check_bytes(SrcObject *t1){

}

int
main (int argc, char *argv[])
{
  //GMainLoop *loop;
  GstRTSPServer *server;
  GstRTSPMountPoints *mounts;
  GstRTSPMediaFactory *factory;

  guint id;

  gst_init (&argc, &argv);

  loop = g_main_loop_new (NULL, FALSE);

  /* create a server instance */
  server = gst_rtsp_server_new ();
  g_object_set (server, "service", "8553", NULL);

  /* get the mount points for this server, every server has a default object
   * that be used to map uri mount points to media factories */
  mounts = gst_rtsp_server_get_mount_points (server);

  /* make a media factory for a test stream. The default media factory can use
   * gst-launch syntax to create pipelines. 
   * any launch line works as long as it contains elements named pay%d. Each
   * element with pay%d names will be a stream */
  factory = gst_rtsp_media_factory_new ();

  if(g_remove (SHM_PATH)==0)
    g_print("DELETE_SHM_PATH\n");
  else
    g_print("DELETE_FAIL_SHM_PATH\n");

  if(g_mkdir(DIR_PATH, S_IRWXUGO))
  {
    g_print("CREATE_DIR_PATH_SUCCESS\n");
  }
  else{
    g_print("DIR_EXSIT\n");
  }


  /* TEST SRC  */
  //gst_rtsp_media_factory_set_launch (factory,
  //    "( videotestsrc is-live=1 ! x264enc ! rtph264pay name=pay0 pt=96 )");
  /* SHM SRC  */


  gchar* media_pipeline = g_strdup_printf("shmsrc socket-path=%s do-timestamp=TRUE is-live=TRUE"
             " ! video/x-h264, width=(int)1, height=(int)1, framerate=(fraction)30/1, stream-format=(string)byte-stream, alignment=au"
             " ! queue name=queue1 flush-on-eos=TRUE max-size-buffers=200, max-size-bytes=10485760, min-threshold-buffers=50, min-threshold-bytes=1048576, min-threshold-time=200, leaky=0 " 
             " ! rtph264pay config-interval=0 name=pay0 pt=97", SHM_PATH);

  
  gst_rtsp_media_factory_set_launch (factory, media_pipeline);
  g_free (media_pipeline);


  gst_rtsp_media_factory_set_shared (factory, TRUE); // Default: TRUE
  gst_rtsp_media_factory_set_suspend_mode (factory, GST_RTSP_SUSPEND_MODE_RESET); // Default: GST_RTSP_SUSPEND_MODE_NONE
  gst_rtsp_media_factory_set_eos_shutdown(factory, TRUE); // Default: FALSE
  gst_rtsp_media_factory_set_latency (factory, 200); // Default: 2000
  gst_rtsp_media_factory_set_buffer_size (factory, 65536); // Default: 524288 > 512 times
  gst_rtsp_media_factory_set_eos_shutdown (factory, TRUE); // Default: TRUE
  // gst_rtsp_media_factory_set_stop_on_disconnect (rtsp_factory, FALSE); // Default: TRUE
  // gst_rtsp_media_factory_set_retransmission_time(rtsp_factory, 10); // Default: 0
  // gst_rtsp_media_factory_set_do_retransmission(rtsp_factory, TRUE); // Default: FALSE 
  
  /* add signal to factory */
   //g_signal_connect (factory, "media-configure", (GCallback) media_configure, NULL);


  /* attach the test factory to the /test url */
  gst_rtsp_mount_points_add_factory (mounts, MOUNT_PATH, factory);
  /* Configure if media created from this factory should be stopped
    * when a client disconnects without sending TEARDOWN. */   
  gst_rtsp_media_factory_set_stop_on_disconnect(factory, TRUE);   
  /* don't need the ref to the mapper anymore */  
  g_object_unref (mounts);

  /* attach the server to the default maincontext */
  if ((id = gst_rtsp_server_attach (server, NULL)) == 0)
    goto ERROR;
  
  int port = gst_rtsp_server_get_bound_port (server);
  gchar* ip = gst_rtsp_server_get_address (server);
  g_print ("Server(%s:%d) CREATED!\n", ip, port);
  g_free (ip);

  /* start serving */
  g_print ("stream ready at rtsp://192.168.0.13:8554%s\n",MOUNT_PATH);


  /* Connect cam */
  struct SrcObject t1;
  t1.isempty = TRUE;  
  MakeSrcObject(&t1);


  /* Connect signal to Server */
  g_signal_connect (server, "client-connected", (GCallback) client_connected, NULL);
  g_timeout_add_seconds (30, (GSourceFunc) CleanExpiredSession, server);
  g_timeout_add_seconds (5, (GSourceFunc) check_bytes, &t1);


  g_main_loop_run (loop);

  EXIT:
  //g_main_loop_unref (mainloop);
  gst_deinit();
  
  return false;

  /* CLEAN UP */
  g_source_remove (id);
  g_object_unref (server);
  g_main_loop_unref (loop);

  /* RM DIR */ 
  


  ERROR:
  g_print ("ERROR OCCURED\n");
  goto EXIT;

  return 0;
}